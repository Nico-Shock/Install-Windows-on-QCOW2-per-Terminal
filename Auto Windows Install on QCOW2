#!/bin/bash

# ================================
# Personalisierungseinstellungen
# ================================

# Pfade und Dateinamen
ISO_PATH="/home/nico-shock/Dokumente/Daten/ISOs/Windows 11/Win11_24H2_German_x64.iso"  # Pfad zur Windows-ISO-Datei
QCOW2_PATH="./windows.qcow2"                                                             # Pfad zur zu erstellenden QCOW2-Datei im aktuellen Verzeichnis
QCOW2_SIZE="70G"                                                                         # Größe der QCOW2-Datei
EFI_PARTITION="/mnt/efi"                                                                 # Pfad zur EFI-Partition
WINDOWS_MOUNT="/mnt/windows"                                                              # Mount-Punkt für Windows-Dateien
ISO_MOUNT="/mnt/iso"                                                                     # Mount-Punkt für die ISO-Datei

# ================================
# Funktion zur Bereinigung
# ================================
cleanup() {
    echo "Bereinige und trenne die Verbindungen..."
    sudo umount "$EFI_PARTITION" 2>/dev/null
    sudo umount "$WINDOWS_MOUNT" 2>/dev/null
    sudo umount "$ISO_MOUNT" 2>/dev/null
    sudo qemu-nbd --disconnect /dev/nbd0 2>/dev/null
    sudo rmdir "$EFI_PARTITION" 2>/dev/null
    sudo rmdir "$WINDOWS_MOUNT" 2>/dev/null
    sudo rmdir "$ISO_MOUNT" 2>/dev/null
}

# ================================
# Start der Automatisierung
# ================================

# Installiere benötigte Pakete
echo "Installiere QEMU, wimlib und tpm2-tools..."
if command -v apt >/dev/null; then
    sudo apt update && sudo apt install -y qemu qemu-kvm wimlib tpm2-tools
elif command -v dnf >/dev/null; then
    sudo dnf install -y qemu-kvm wimlib tpm2-tools
elif command -v pacman >/dev/null; then
    sudo pacman -Syu --noconfirm qemu-base qemu-emulators-full wimlib tpm2-tools
else
    echo "Paketmanager nicht unterstützt. Bitte installiere QEMU, wimlib und tpm2-tools manuell."
    exit 1
fi

# Erstelle die QCOW2-Datei
echo "Erstelle QCOW2-Datei..."
if ! qemu-img create -f qcow2 "$QCOW2_PATH" "$QCOW2_SIZE"; then
    echo "[ERROR] Fehler beim Erstellen der QCOW2-Datei."
    cleanup
    exit 1
fi

# Verbinde QCOW2-Datei mit qemu-nbd
echo "Verbinde QCOW2-Datei mit qemu-nbd..."
if ! sudo modprobe nbd max_part=16; then
    echo "[WARNING] Fehler beim Laden des nbd-Moduls, versuche es erneut..."
    if ! sudo modprobe nbd; then
        echo "[ERROR] NBD-Modul konnte nicht geladen werden. Abbruch."
        cleanup
        exit 1
    fi
fi

if ! sudo qemu-nbd --connect=/dev/nbd0 "$QCOW2_PATH"; then
    echo "[ERROR] Fehler beim Verbinden der QCOW2-Datei mit /dev/nbd0."
    cleanup
    exit 1
fi

# Erstelle die Partitionen automatisch
echo "Erstelle EFI-Partition und Windows-Partition..."
if ! sudo parted /dev/nbd0 --script mklabel gpt; then
    echo "[ERROR] Fehler beim Erstellen des Partitionstyps."
    cleanup
    exit 1
fi

if ! sudo parted /dev/nbd0 --script mkpart primary fat32 1MiB 201MiB; then
    echo "[ERROR] Fehler beim Erstellen der EFI-Partition."
    cleanup
    exit 1
fi

if ! sudo parted /dev/nbd0 --script mkpart primary ntfs 201MiB 100%; then
    echo "[ERROR] Fehler beim Erstellen der Windows-Partition."
    cleanup
    exit 1
fi

# Mounten der Partitionen
echo "Mounten der Partitionen..."
sudo mkdir -p "$EFI_PARTITION" "$WINDOWS_MOUNT" "$ISO_MOUNT"

# Formatieren der EFI-Partition im FAT32
if ! sudo mkfs.vfat -n "EFI" /dev/nbd0p1; then
    echo "[ERROR] Fehler beim Formatieren der EFI-Partition."
    cleanup
    exit 1
fi

# Mounten der EFI-Partition
if ! sudo mount /dev/nbd0p1 "$EFI_PARTITION"; then
    echo "[ERROR] Fehler beim Mounten der EFI-Partition."
    cleanup
    exit 1
else
    echo "EFI-Partition erfolgreich gemountet."
fi

# Formatieren der Windows-Partition im NTFS
if ! sudo mkfs.ntfs -f -L "Windows" /dev/nbd0p2; then
    echo "[ERROR] Fehler beim Formatieren der Windows-Partition."
    cleanup
    exit 1
fi

# Mounten der Windows-Partition
if ! sudo mount /dev/nbd0p2 "$WINDOWS_MOUNT"; then
    echo "[ERROR] Fehler beim Mounten der Windows-Partition."
    cleanup
    exit 1
else
    echo "Windows-Partition erfolgreich gemountet."
fi

# Überprüfe, ob die ISO-Datei gültig ist
if [[ ! -f "$ISO_PATH" ]]; then
    echo "[ERROR] Die ISO-Datei wurde nicht gefunden: $ISO_PATH"
    cleanup
    exit 1
fi

# Mounten der ISO-Datei
echo "Mounten der ISO-Datei..."
if ! sudo mount -o loop "$ISO_PATH" "$ISO_MOUNT"; then
    echo "[ERROR] Fehler beim Mounten der ISO-Datei."
    cleanup
    exit 1
fi

# Übertrage das Installations-Image mit wimapply
echo "Übertrage Windows-Image auf die Windows-Partition..."
if ! sudo wimapply "$ISO_MOUNT/sources/install.wim" 1 "$WINDOWS_MOUNT"; then
    echo "[ERROR] Fehler beim Übertragen des Windows-Image."
    cleanup
    exit 1
fi

# Bereinige und trenne die Verbindungen
cleanup

# Installiere den Windows-Bootloader
echo "Installiere den Windows-Bootloader..."
if ! sudo bcdboot "$WINDOWS_MOUNT/Windows" /s "$EFI_PARTITION" /f UEFI; then
    echo "[ERROR] Fehler beim Installieren des Bootloaders."
    cleanup
    exit 1
fi

# Starte die Windows-Installation mit QEMU
echo "Installation vorbereitet. Starte QEMU..."
if ! sudo qemu-system-x86_64 -hda "$QCOW2_PATH" -boot d -cdrom "$ISO_PATH" -m 4096 -enable-kvm; then
    echo "[ERROR] QEMU konnte nicht gestartet werden. Überprüfe, ob das QCOW2-Image von einem anderen Prozess verwendet wird."
    cleanup
    exit 1
fi
